//написать метод высшего порядка reduce
// (пишем свою, не пользуемся готовым), которая
// принимает лямбду принимающую два аргумента и массив типа int.
//
//        метод должен выполнить указанную лямбду на переданном массиве таким образом:
//
//        пример лямбды: (x, y) -> x + y
//        пример массива [1, 2, 3, 4, 5]
//        результат 15
//
//        пример работы:
//        1 шаг: В лямбду передается x=1, y=2 результат 3
//        2 шаг: В лямбду передается x=3 (результат предыдущего вызова функции), y=3 результат 6
//        3 шаг: В лямбду передается x=6 (результат предыдущего вызова функции), y=4 результат 10
//        4 шаг: В лямбду передается x=10 (результат предыдущего вызова функции), y=5 результат 15
//
//        таким образом результатом работы reduce стало 15
//
//        должно работать с разными лямбдами, принимающими 2 аргумента и разными массивами типа int


import java.util.Arrays;

public class Func_9 {

    public static void main(String[] args) {

        //есть массив целых чисел
        Number[] array = {1,2,3,4,5,-.3e1,4f,0,3,7,.5,-.01};

        // объект func является функцией, принимающей на входе две переменные в виде чисел любого типа
        // и выводящей результат в виде значения функции двух переменных

        Calc func1 = Double::sum; // упрощённая лямбда суммы значений
        Calc func2 = (double x,double y) -> x - y;
        Calc func3 = (double x,double y) -> x * y;
        Calc func4 = (double x, double y) -> {
            if (y==0) throw new Error("Деление на 0!!!");  // в случае если делитель равен 0, создаём ошибку
            return x / y;
        };
        Calc func5 = (double x, double y) -> {
            if (y==0 || x==0) throw new Error("Деление на 0!!!");  // в случае если делитель равен 0, создаём ошибку
            return x*x - Math.abs(x/y - 7) + 5*y/x;
        };

            //вывод элементов массива на экран
            System.out.println("\nРасcчитаем для элементов массива: " + Arrays.toString(array) + "\nследующие функции: \n");


            //вызов главного метода вычисления функции
            map(array, func1, "x + y");
            map(array, func2, "x - y");
            map(array, func3, "x * y");
            map(array, func4, "x / y");
            map(array, func5, "x*x - |x/y - 7| + 5y/x");

    }



    //метод, в котором над каждым элементом массива array происходит выполнение функции func
    public static void map(Number[] massiv, Calc f, String str){

        //присвоение переменной Х для первой итерации значения
        // первого элемента массива с конвертацией числа в тип Double
            double x= convertToDouble(massiv[0]);
            double y;


        System.out.println("F(x,y) =  " + str + " :");

        // перебор элементов массива для вывода значения функции
        for (int i=1; i< massiv.length; ++i) {

            // присвоение значения переменной y с конвертацией числа в Double
            y = convertToDouble(massiv[i]);

            //вывод на экран текущих значений переменных
            System.out.print("           шаг " + i + ":   x = " + convertToStr(x) + ", y = " + convertToStr(y) + ";     " + "F = ");


            //вылавливание возможной ошибки деления на 0
            try {
            x = f.calc(x,y);
            // вывод на экран текущего результата функции
            System.out.println(convertToStr(x));
            } catch(Error e){
                System.out.println("На ноль не делим.");}

        }
        System.out.println();


    }

    //приводим число из массива к типу double, предварительно ковертируя его в строку
    public static <Type> double convertToDouble(Type a) {
        return Double.parseDouble(a.toString());
    }

    //для вывода числа на экран в более приятной глазу форме,
    // переводим целочисленное значение к int и выводим строкой, а вещественное число сокращаем вывод до 3х знаков после запятой
    public static String convertToStr(double a){
        if (a % 1 == 0) {
            return Integer.toString((int)a);
        }
        return Double.toString((double)((int)(a*1000))/1000);
    }

}